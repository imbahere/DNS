#if 0

	shc -r -v -f /root/dns1.sh 
#endif

static  char data [] = 
#define      tst2_z	19
#define      tst2	((&data[3]))
	"\032\104\107\010\247\247\102\272\146\072\375\165\251\106\163\346"
	"\123\254\075\242\304\267\317\135\005"
#define      xecc_z	15
#define      xecc	((&data[28]))
	"\004\312\005\337\024\155\143\342\323\015\247\105\125\315\321\172"
	"\206\371\346\013\327"
#define      rlax_z	1
#define      rlax	((&data[46]))
	"\044"
#define      lsto_z	1
#define      lsto	((&data[47]))
	"\163"
#define      msg1_z	65
#define      msg1	((&data[51]))
	"\255\107\012\165\056\145\161\340\063\364\366\214\374\252\171\077"
	"\255\121\121\223\162\100\353\041\050\327\063\030\262\212\046\145"
	"\152\174\276\310\240\176\116\234\031\222\012\360\125\240\265\301"
	"\254\020\107\340\175\125\107\121\153\025\253\006\040\123\034\246"
	"\021\055\116\346\056\066\255\333\120"
#define      chk2_z	19
#define      chk2	((&data[121]))
	"\110\125\301\227\250\023\122\175\312\357\023\122\207\344\326\301"
	"\255\047\255"
#define      inlo_z	3
#define      inlo	((&data[140]))
	"\054\350\043"
#define      date_z	1
#define      date	((&data[143]))
	"\175"
#define      pswd_z	256
#define      pswd	((&data[204]))
	"\371\305\040\363\377\176\272\161\237\364\301\115\074\314\173\162"
	"\172\127\303\154\172\344\274\242\147\337\212\356\316\170\134\307"
	"\075\174\272\074\373\165\256\232\151\157\347\246\074\143\030\266"
	"\273\334\042\065\300\336\327\047\276\142\026\214\072\005\245\377"
	"\062\375\276\113\204\146\377\070\074\170\015\062\011\375\020\220"
	"\316\042\005\023\010\320\177\046\055\357\062\147\364\330\147\047"
	"\326\045\162\133\214\162\223\310\353\241\373\364\236\014\204\155"
	"\056\212\200\067\133\000\135\211\357\220\361\344\151\130\013\100"
	"\176\176\233\012\360\057\323\333\320\316\317\157\333\124\334\011"
	"\337\135\101\073\135\236\304\115\057\265\061\231\015\074\332\213"
	"\272\166\226\253\245\151\206\166\070\126\346\023\252\303\035\212"
	"\040\136\305\176\375\211\313\055\077\374\307\114\071\241\330\364"
	"\027\157\237\274\330\045\063\021\174\031\044\047\334\102\261\375"
	"\240\166\174\236\000\107\313\077\104\222\214\175\064\145\161\113"
	"\324\021\010\255\067\073\276\263\125\343\332\062\046\214\057\307"
	"\003\253\145\004\363\061\103\067\304\320\265\370\066\047\104\013"
	"\070\114\271\157\210\170\042\335\133\375\017\201\211\077\110\215"
	"\353\256\221\336\337\325\026\243\245\313\234\334\363\340\350\053"
	"\054\241\232\264\031\275\222\165\273\242\367\104\341\100\321\314"
	"\356\142\253\316\070\301\161\335\215\016\272\200\332\162\124\030"
	"\356\016\124\352\204\002\205\356\162\154\224\256\320\255\145\214"
	"\211\207\301\112\146\230\162"
#define      shll_z	10
#define      shll	((&data[489]))
	"\262\325\113\344\176\370\070\170\235\252\207\363\372"
#define      tst1_z	22
#define      tst1	((&data[505]))
	"\025\102\323\231\105\107\302\200\161\333\205\006\036\066\353\151"
	"\325\243\056\151\163\253\156\115\175\106\352\130\207\267\305\034"
#define      chk1_z	22
#define      chk1	((&data[535]))
	"\313\042\123\253\052\065\355\303\322\375\062\377\233\167\000\222"
	"\016\014\262\207\263\374\155\043\165\123\343\236\272"
#define      msg2_z	19
#define      msg2	((&data[561]))
	"\321\242\165\315\326\004\242\214\133\107\106\126\363\374\237\302"
	"\021\166\072\167\230\223\115"
#define      opts_z	1
#define      opts	((&data[584]))
	"\133"
#define      text_z	2538
#define      text	((&data[1020]))
	"\116\111\302\247\321\172\154\355\340\002\267\254\044\013\000\010"
	"\251\273\204\272\233\374\122\057\111\345\311\204\141\170\002\260"
	"\302\305\127\223\077\304\201\040\306\070\314\353\104\315\364\355"
	"\210\171\247\044\165\372\123\277\337\034\104\101\225\106\361\127"
	"\013\110\353\113\014\154\153\323\245\070\277\351\005\263\327\216"
	"\054\177\263\241\171\006\141\131\043\245\232\270\354\214\020\367"
	"\324\374\102\341\150\256\264\016\346\164\367\354\047\317\172\124"
	"\116\055\366\310\064\127\041\127\375\274\020\351\110\041\341\035"
	"\035\043\376\206\322\263\224\270\047\214\245\117\133\037\243\251"
	"\115\231\162\201\361\224\331\356\120\352\327\231\013\270\266\051"
	"\334\265\257\256\151\103\147\221\320\014\341\053\054\204\325\171"
	"\036\107\373\020\333\325\376\054\277\326\306\313\216\174\364\153"
	"\062\244\032\234\350\202\055\270\216\016\343\273\223\271\064\262"
	"\000\060\302\334\006\301\010\305\227\316\221\046\113\206\221\176"
	"\052\254\032\022\056\110\312\274\127\256\170\352\147\254\234\147"
	"\335\137\104\343\040\115\251\267\034\072\336\150\301\160\346\353"
	"\034\001\376\112\112\311\007\241\167\177\213\336\054\050\106\012"
	"\207\213\355\250\330\226\140\364\321\076\134\222\256\103\176\313"
	"\105\175\025\217\106\035\060\275\235\274\234\311\344\343\323\154"
	"\156\301\025\106\130\165\073\051\264\230\274\143\333\072\056\041"
	"\270\104\260\376\141\341\273\376\236\130\310\203\073\234\357\251"
	"\135\005\357\265\172\052\337\057\302\233\222\236\326\300\300\216"
	"\004\161\215\146\122\110\145\360\240\056\164\333\312\144\204\050"
	"\151\164\336\344\237\275\023\142\131\246\000\060\146\300\277\153"
	"\061\114\322\204\225\067\165\066\146\351\021\060\115\226\131\267"
	"\013\067\233\252\365\256\014\116\124\015\177\273\316\076\047\000"
	"\213\371\205\040\061\372\126\227\344\150\310\062\377\041\351\012"
	"\131\204\265\100\061\314\367\311\215\342\376\115\055\366\155\121"
	"\143\154\163\056\230\061\054\133\313\017\020\270\001\234\123\364"
	"\063\153\315\265\103\061\151\171\213\177\013\022\270\301\326\011"
	"\234\043\011\251\251\215\342\305\211\237\324\003\067\140\227\272"
	"\323\365\151\246\064\174\145\033\344\110\301\026\224\344\047\005"
	"\012\113\356\141\173\124\055\055\136\200\236\302\142\315\372\073"
	"\060\377\004\161\117\075\064\262\365\057\217\103\010\071\174\004"
	"\143\303\351\331\336\144\011\125\046\367\115\336\354\135\011\222"
	"\374\204\154\320\117\071\236\216\365\354\045\213\054\246\067\025"
	"\235\012\214\345\231\316\356\352\131\347\361\152\040\323\167\233"
	"\135\114\377\071\021\144\315\210\103\047\243\302\046\053\033\123"
	"\367\265\315\035\376\034\212\102\037\025\152\253\313\345\176\213"
	"\355\007\010\004\140\061\215\264\000\257\163\351\314\032\202\060"
	"\253\373\063\162\054\231\304\073\144\264\264\255\022\247\103\040"
	"\142\205\135\016\364\017\334\335\375\353\155\045\376\302\025\363"
	"\033\233\221\165\316\165\306\314\321\121\275\317\261\270\053\056"
	"\030\010\355\274\074\102\034\216\310\176\172\153\373\100\007\137"
	"\344\353\206\341\226\045\045\223\163\072\074\234\111\314\212\202"
	"\272\367\106\320\175\066\340\236\313\224\256\265\375\053\052\162"
	"\077\166\045\264\217\216\137\226\045\347\367\325\273\201\375\303"
	"\022\146\316\125\277\167\204\007\237\024\321\124\234\002\031\002"
	"\205\301\054\146\003\366\226\114\240\160\201\307\221\324\143\061"
	"\272\367\104\346\100\216\203\171\152\322\372\133\275\237\221\317"
	"\100\137\056\316\152\260\154\336\000\331\116\245\256\065\176\317"
	"\113\220\203\111\336\354\213\232\301\347\143\027\046\216\022\203"
	"\271\004\162\003\207\006\177\176\252\230\107\263\041\042\163\333"
	"\317\216\354\265\042\054\211\230\221\270\242\342\222\335\125\255"
	"\333\377\005\001\205\116\260\000\235\101\314\317\031\047\332\157"
	"\151\025\161\161\360\003\315\073\326\041\211\175\200\120\160\330"
	"\346\312\033\363\074\026\342\310\114\220\305\176\205\371\245\161"
	"\010\102\304\016\000\231\300\112\303\350\053\167\142\062\200\036"
	"\176\360\056\241\241\341\247\367\334\340\111\246\052\237\211\244"
	"\265\375\240\061\263\056\134\303\041\107\304\060\323\305\227\256"
	"\044\267\371\105\123\277\170\322\160\004\323\266\031\173\331\340"
	"\304\266\366\273\220\044\006\322\367\004\073\146\257\213\220\167"
	"\364\202\045\371\007\145\163\031\110\322\323\277\305\017\124\355"
	"\040\326\154\043\317\103\066\037\025\376\277\014\065\135\344\123"
	"\154\124\064\322\306\144\223\067\037\333\207\320\355\370\252\106"
	"\022\272\224\251\036\175\076\305\247\202\070\105\007\363\130\055"
	"\011\030\241\043\146\337\242\066\301\240\054\056\210\153\320\352"
	"\057\006\040\143\107\255\331\367\165\361\056\201\247\207\215\307"
	"\347\253\016\204\240\352\363\304\047\211\114\367\000\351\057\311"
	"\357\017\064\302\356\333\112\123\042\100\174\374\020\340\060\171"
	"\255\316\205\263\004\242\152\041\342\373\031\233\217\112\006\214"
	"\263\003\147\365\043\113\236\126\235\340\121\064\004\215\153\230"
	"\006\260\103\100\105\105\353\155\316\052\131\177\126\065\143\371"
	"\041\116\045\337\054\256\277\022\211\051\060\261\224\301\205\315"
	"\003\100\242\022\342\143\336\212\143\020\047\073\105\012\160\315"
	"\135\011\066\063\227\132\204\047\165\124\266\077\244\146\171\071"
	"\346\017\360\232\234\270\374\276\013\122\345\256\265\265\264\302"
	"\156\206\330\340\375\120\157\243\251\207\007\354\001\133\135\026"
	"\174\026\363\214\274\067\245\301\342\066\226\141\035\170\327\233"
	"\211\344\374\237\134\165\371\057\054\107\143\053\270\323\267\316"
	"\320\072\262\112\117\257\144\117\133\316\140\004\162\343\223\042"
	"\213\035\354\377\126\360\103\334\105\347\246\134\217\364\123\270"
	"\330\324\170\251\373\220\205\226\271\021\014\130\156\211\271\234"
	"\077\276\174\171\212\130\375\045\012\274\275\057\164\247\331\132"
	"\161\306\107\040\134\241\061\135\161\023\236\270\301\345\322\110"
	"\274\246\210\311\354\246\030\275\151\214\114\121\260\212\133\370"
	"\131\212\006\172\106\353\207\111\245\314\141\265\245\114\247\345"
	"\072\231\302\212\333\013\037\277\116\217\322\304\034\341\163\147"
	"\335\176\346\150\031\103\316\254\024\047\134\367\315\162\000\212"
	"\311\224\361\003\004\151\113\072\216\112\336\121\100\330\224\220"
	"\216\014\314\061\102\344\245\057\346\164\032\067\271\171\244\150"
	"\150\301\107\161\145\245\272\005\150\247\117\221\022\111\006\105"
	"\314\375\062\340\073\272\126\161\164\221\036\364\147\245\243\154"
	"\261\066\237\327\064\372\035\016\243\346\072\113\261\156\027\065"
	"\163\043\353\066\057\341\151\106\166\010\335\105\243\361\105\066"
	"\357\266\341\034\332\242\322\147\215\106\031\027\145\012\227\231"
	"\125\175\222\354\070\304\022\060\070\052\035\342\227\022\204\351"
	"\035\114\320\356\276\137\343\044\205\110\233\255\100\127\257\202"
	"\233\267\044\312\336\307\016\373\312\262\003\012\225\375\235\245"
	"\177\102\172\374\331\374\033\376\156\356\040\240\020\102\243\105"
	"\021\244\142\043\134\114\033\212\335\107\040\373\170\021\356\146"
	"\325\336\240\031\331\246\175\343\136\003\374\202\342\105\133\113"
	"\044\126\264\226\310\016\103\113\371\041\237\121\146\177\143\004"
	"\303\320\046\265\141\262\165\326\242\350\124\255\227\215\301\254"
	"\066\232\277\051\354\162\303\153\345\047\326\363\335\277\152\363"
	"\231\243\210\123\153\216\036\035\350\243\370\361\151\137\040\334"
	"\362\310\311\303\250\350\356\041\250\155\160\371\130\000\056\323"
	"\015\352\222\261\030\315\342\341\145\313\314\245\374\210\013\100"
	"\222\234\133\057\205\245\035\065\310\343\150\341\066\026\003\164"
	"\360\370\155\214\152\154\232\005\143\375\327\225\334\154\306\256"
	"\116\036\172\054\371\352\365\107\332\220\021\144\256\250\206\326"
	"\126\176\004\323\022\262\363\142\002\011\355\220\202\331\302\304"
	"\006\316\120\062\362\103\344\107\025\136\244\122\273\207\271\376"
	"\321\273\347\007\316\231\140\275\117\152\141\377\042\221\263\221"
	"\340\043\144\175\365\341\223\154\013\024\335\141\325\171\033\005"
	"\204\363\067\146\004\223\000\240\235\310\042\272\363\240\120\341"
	"\313\005\176\020\051\062\074\313\176\271\237\275\245\301\332\121"
	"\143\160\021\176\170\222\366\042\120\206\163\340\364\062\131\151"
	"\221\172\232\170\223\214\372\101\204\116\354\336\016\360\174\242"
	"\011\364\360\010\341\157\360\304\120\142\204\350\116\210\251\006"
	"\364\176\170\110\050\172\002\106\277\152\062\335\255\146\051\324"
	"\334\237\047\272\022\215\065\314\356\013\103\312\160\014\320\111"
	"\046\323\022\065\035\323\030\070\356\113\044\263\104\154\355\064"
	"\016\353\311\374\350\367\044\354\232\156\362\246\037\064\011\356"
	"\347\022\002\233\031\313\327\110\141\011\024\354\150\242\103\257"
	"\116\100\141\064\122\021\151\232\353\004\312\372\263\047\353\221"
	"\011\004\164\212\023\326\321\374\053\060\003\367\337\370\057\026"
	"\003\365\230\205\070\070\070\144\226\300\376\111\351\042\252\315"
	"\053\346\064\147\233\266\357\157\355\363\137\301\256\321\161\316"
	"\162\006\247\173\336\162\274\012\172\026\354\137\303\326\167\365"
	"\012\210\357\135\064\332\244\111\112\131\320\023\042\103\065\172"
	"\234\155\364\033\104\270\273\325\163\220\046\236\343\063\151\261"
	"\347\317\345\013\116\367\107\234\376\374\323\135\270\175\022\176"
	"\331\216\063\170\373\111\332\264\366\241\064\123\265\205\235\215"
	"\156\240\056\363\220\062\040\276\313\233\361\250\136\153\125\073"
	"\314\023\143\157\226\021\004\347\335\230\174\216\343\061\166\114"
	"\113\066\233\151\321\201\350\311\333\124\302\202\076\152\211\107"
	"\067\362\342\147\311\037\370\036\025\337\305\115\161\376\344\355"
	"\231\112\335\311\205\152\107\000\335\072\315\246\342\037\147\272"
	"\032\257\065\014\254\033\144\137\364\364\353\155\320\117\003\115"
	"\317\167\326\135\223\057\116\247\013\114\102\321\110\332\313\273"
	"\325\325\106\162\021\167\022\104\176\121\170\235\177\260\144\027"
	"\073\156\266\052\130\370\302\365\212\317\020\022\030\174\147\161"
	"\170\250\262\103\364\327\070\174\102\237\047\021\164\045\061\153"
	"\333\153\377\354\034\305\013\150\110\246\335\376\065\301\243\051"
	"\121\060\061\071\045\000\047\243\142\343\233\343\312\151\316\314"
	"\023\117\254\163\325\007\134\074\240\373\106\232\044\121\250\242"
	"\170\256\167\324\116\172\205\353\010\113\112\313\021\122\005\035"
	"\134\151\255\123\252\061\341\140\232\052\330\363\107\036\341\271"
	"\314\255\351\020\140\170\224\250\033\171\122\206\030\003\075\155"
	"\074\055\324\110\266\154\305\326\375\257\335\160\024\277\050\165"
	"\104\373\374\035\115\102\270\146\066\127\177\052\334\320\067\214"
	"\311\124\236\367\305\311\225\135\016\155\163\173\262\350\147\363"
	"\343\363\327\315\226\147\176\071\270\310\154\053\313\225\230\104"
	"\370\255\050\230\314\335\166\363\220\363\136\156\222\372\211\062"
	"\317\333\047\024\345\313\040\050\222\351\053\030\017\166\142\165"
	"\261\334\175\217\304\126\134\177\117\176\224\206\023\015\107\302"
	"\225\055\040\077\352\277\313\025\110\137\246\345\343\053\107\044"
	"\061\314\356\214\203\334\000\311\341\217\237\373\162\067\045\230"
	"\204\126\053\352\043\267\044\367\364\241\303\342\032\252\222\072"
	"\326\177\334\134\156\077\062\225\005\245\264\302\237\203\047\330"
	"\262\357\130\343\143\353\015\074\336\363\334\265\170\316\004\145"
	"\144\047\065\277\065\007\077\055\007\266\253\167\051\272\325\173"
	"\222\002\275\255\312\224\336\077\170\235\311\215\354\311\171\324"
	"\130\311\241\360\352\130\113\174\316\166\275\253\366\056\251\253"
	"\252\023\357\102\131\216\044\064\121\213\207\154\150\007\034\363"
	"\342\231\215\203\377\163\224\265\044\135\146\024\036\223\022\270"
	"\345\265\307\061\017\055\354\014\060\126\267\071\121\140\241\303"
	"\241\203\115\310\002\166\252\153\177\017\041\153\236\112\013\050"
	"\200\303\200\217\114\231\335\052\101\174\212\242\275\161\010\147"
	"\141\041\313\155\304\351\236\200\337\100\075\120\076\322\276\274"
	"\353\320\144\031\302\006\146\155\030\175\111\377\350\325\134\135"
	"\061\165\373\210\326\260\163\010\032\062\362\174\253\137\134\162"
	"\211\213\114\004\350\043\200\342\310\377\351\365\155\144\224\132"
	"\143\356\215\366\261\020\105\017\345\113\006\035\304\372\344\114"
	"\161\314\170\072\116\263\127\031\101\336\220\370\241\103\350\073"
	"\311\266\107\210\114\324\340\207\161\244\115\120\356\134\335\006"
	"\117\172\122\011\225\265\025\102\113\033\233\177\343\110\174\150"
	"\362\031\110\034\162\215\046\254\125\031\311\345\264\122\026\322"
	"\036\110\033\120\022\350\362\255\071\005\166\247\017\156\363\345"
	"\020\377\350\044\254\247\204\234\006\214\007\035\273\013\351\342"
	"\162\034\263\246\121\102\000\273\232\213\346\046\024\013\311\373"
	"\333\353\365\322\244\016\023\332\200\174\366\141\212\112\326\026"
	"\156\312\102\202\073\306\162\015\252\231\123\070\310\333\037\276"
	"\003\003\122\300\162\017\144\001\241\314\226\261\202\236\247\263"
	"\302\240\040\105\015\061\326\101\164\201\114\161\023\116\063\302"
	"\235\210\320\035\103\236\134\153\237\347\145\044\010\226\037\137"
	"\056\004\307\367\066\307\031\037\321\163\244\207\301\330\111\137"
	"\140\032\175\244\270\331\017\130\300\164\174\311\013\234\050\072"
	"\240\357\062\327\266\113\367\210\276\233\020\200\163\132\340\324"
	"\164\135\170\054\066\210\205\367\375\001\301\011\236\351\104\076"
	"\331\166\026\220\302\015\031\200\251\051\001\035\203\342\361\367"
	"\077\152\044\166\362\251\156\357\253\057\371\112\031\075\210\362"
	"\263\237\202\165\254\233\366\125\305\370\163\110\332\144\100\032"
	"\316\144\221\301\016\377\261\272\057\252\004\110\347\215\072\232"
	"\054\275\020\331\131\006\057\036\376\242\147\331\006\247\363\325"
	"\014\204\226\033\204\107\325\264\362\331\374\331\147\067\164\223"
	"\365\204\154\116\213\233\155\211\076\325\143\104\174\127\032\211"
	"\334\261\244\140\371\171\025\353\123\021\304\272\111\071\116\076"
	"\275\272\215\110\126\373\322\224\320\065\331\115\215\363\326\151"
	"\244\172\312\236\363\337\211\107\361\116\001\072\207\117\171\104"
	"\012\007\215\141\002\137\365\322\225\317\040\042\302\366\214\147"
	"\160\126\005\144\066\217\253\047\335\255\141\144\375\333\251\007"
	"\342\066\150\345\226\136\270\053\055\330\116\357\316\332\127\077"
	"\061\135\243\147\354\117\216\312\374\360\057\371\314\330\001\256"
	"\017\151\224\245"/* End of data[] */;
#define      hide_z	4096
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
#define BUSYBOXON	0	/* Define as 1 to enable work with busybox */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

void chkenv_end(void);

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask = (unsigned long)getpid();
	stte_0();
	 key(&chkenv, (void*)&chkenv_end - (void*)&chkenv);
	 key(&data, sizeof(data));
	 key(&mask, sizeof(mask));
	arc4(&mask, sizeof(mask));
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

void chkenv_end(void){}

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
#	define PTRACE_ATTACH	PT_ATTACH
#endif
void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];
	if (me == NULL) { me = getenv("_"); }
	if (me == 0) { fprintf(stderr, "E: neither argv[0] nor $_ works."); exit(1); }

	ret = chkenv(argc);
	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
#if BUSYBOXON
	varg[j++] = "busybox";
	varg[j++] = "sh";
#else
	varg[j++] = argv[0];		/* My own name at execution */
#endif
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
